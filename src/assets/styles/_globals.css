
html[data-complexity-preference^="IIIII"] {
  scroll-behavior : smooth;
}

body {
  font-family: var(--font-sans-serif);
  font-size: var(--step-0);
  background-color: var(--color-light);
  color: var(--color-dark);
}
[data-complexity-preference^="II"] :is(h1, h2, h3, h4, h5, h6) {
  --measure: 50ch;
  line-height: 1.2;
  font-family: var(--font-sans-serif);
}
[data-complexity-preference^="II"] :is(h3, h4, h5, h6) {
  font-weight: normal;
}
[data-complexity-preference^="II"] :is(h1, [data-heading~="1"]) {
  font-size: var(--step-5);
}
[data-complexity-preference^="II"] :is(h2, [data-heading~="2"]) {
  font-size: var(--step-4);
}
[data-complexity-preference^="II"] :is(h3, [data-heading~="3"]) {
  font-size: var(--step-3);
}
[data-complexity-preference^="II"] :is(h4, [data-heading~="4"]) {
  font-size: var(--step-2);
}
[data-complexity-preference^="II"] :is(h5, [data-heading~="5"]) {
  font-size: var(--step-1);
}
[data-complexity-preference^="II"] :is(h6, [data-heading~="6"]) {
  font-size: var(--step-0);
}
[data-complexity-preference^="II"] :is(h1, h2, h3, h4, h5, h6, p) {
  max-width: var(--measure);
}
[data-complexity-preference^="II"] :is(h1, h2, h3, h4, h5, h6, p, a) {
  color: inherit;
}


[data-complexity-preference^="II"] :is(ul, ol, menu) {
  max-width: var(--list-measure, var(--measure));
  padding-left: var(--padding, initial);
  list-style-position: inside;
}
[data-complexity-preference^="II"] :is(ul[role="list"], ol[role="list"]) {
  list-style: none;
  --list-measure: initial;
}



[data-complexity-preference^="III"] .visually-hidden {
  position: absolute !important;
  width: 1px !important;
  height: 1px !important;
  overflow: hidden !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
} 


[data-complexity-preference^="III"] ol {
  --space: var(--space-s);
  --threshold: 30rem;
  display: flex;
  flex-wrap: wrap;
  gap: var(--space);
  justify-content: var(--horizontal-alignment, flex-start);
  list-style-type: none;
  counter-reset: items;
  padding-left: 0;
}

[data-complexity-preference^="III"] ol > li {
  flex-grow: 1;
  flex-basis: calc((var(--threshold) - 100%) * 999);
  position: relative;
}
[data-complexity-preference^="III"] ol > li::before {
  counter-increment: items;
  content: counter(items);
  font-weight: bold;
  display: block;
  color: var(--color-dark-accent);
  border-bottom: var(--border-thick) solid var(--color-dark-accent, currentColor);
  padding-bottom: var(--space-2xs);
  margin-bottom: var(--space-2xs);
}
[data-complexity-preference^="III"] ol > li:nth-child(n + 4),
[data-complexity-preference^="III"] ol > li:nth-child(n + 4) ~ * {
  /* Switch to a vertical configuration if there are more than 4 child elements */
  flex-basis: 100%;
}


[data-complexity-preference^="III"] output{
  display: block;
}